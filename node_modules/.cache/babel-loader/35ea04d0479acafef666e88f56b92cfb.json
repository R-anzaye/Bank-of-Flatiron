{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ryantrent/Development/code_challenges/Bank-of-Flatiron-phase-2-week-1/src/components/Search.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\n\nfunction Search({\n  transactions\n}) {\n  _s();\n\n  // Step 1: State Initialization\n  const [searchInput, setSearchInput] = useState(''); // Step 2: Input Handling\n\n  const handleInputChange = e => {\n    setSearchInput(e.target.value);\n  }; // Step 3: Search Logic\n  // This is a placeholder for your search logic. You would typically filter an array of items here.\n  // For demonstration, let's assume you have a list of transactions and you want to filter them based on the search input.\n\n\n  const filteredTransactions = transactions.filter(transaction => transaction.description.toLowerCase().includes(searchInput.toLowerCase())); // Step 4: Displaying Results\n  // This is a simple way to display the filtered results. You can customize this as needed.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ui large fluid icon input\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search your Recent Transactions\",\n      value: searchInput,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n      className: \"circular search link icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: filteredTransactions.map(transaction => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: transaction.description\n      }, transaction.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Search, \"6Eq05WFCbfVtzQf4MCSNdgDQaWk=\");\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/home/ryantrent/Development/code_challenges/Bank-of-Flatiron-phase-2-week-1/src/components/Search.js"],"names":["React","useState","Search","transactions","searchInput","setSearchInput","handleInputChange","e","target","value","filteredTransactions","filter","transaction","description","toLowerCase","includes","map","id"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,SAASC,MAAT,CAAgB;AAACC,EAAAA;AAAD,CAAhB,EAAgC;AAAA;;AAC/B;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,EAAD,CAA9C,CAF+B,CAI/B;;AACA,QAAMK,iBAAiB,GAAIC,CAAD,IAAO;AAC9BF,IAAAA,cAAc,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd;AACF,GAFD,CAL+B,CAS/B;AACA;AACA;;;AAGA,QAAMC,oBAAoB,GAAGP,YAAY,CAACQ,MAAb,CAAoBC,WAAW,IACzDA,WAAW,CAACC,WAAZ,CAAwBC,WAAxB,GAAsCC,QAAtC,CAA+CX,WAAW,CAACU,WAAZ,EAA/C,CAD0B,CAA7B,CAd+B,CAkB/B;AACA;;AACA,sBACG;AAAK,IAAA,SAAS,EAAC,2BAAf;AAAA,4BACE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,WAAW,EAAC,iCAFd;AAGE,MAAA,KAAK,EAAEV,WAHT;AAIE,MAAA,QAAQ,EAAEE;AAJZ;AAAA;AAAA;AAAA;AAAA,YADF,eAOE;AAAG,MAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,YAPF,eAQE;AAAA,gBACGI,oBAAoB,CAACM,GAArB,CAAyBJ,WAAW,iBACnC;AAAA,kBAA0BA,WAAW,CAACC;AAAtC,SAASD,WAAW,CAACK,EAArB;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADH;AAgBA;;GApCQf,M;;KAAAA,M;AAsCT,eAAeA,MAAf","sourcesContent":["import React, { useState } from \"react\";\n\nfunction Search({transactions}) {\n // Step 1: State Initialization\n const [searchInput, setSearchInput] = useState('');\n\n // Step 2: Input Handling\n const handleInputChange = (e) => {\n    setSearchInput(e.target.value);\n };\n\n // Step 3: Search Logic\n // This is a placeholder for your search logic. You would typically filter an array of items here.\n // For demonstration, let's assume you have a list of transactions and you want to filter them based on the search input.\n\n\n const filteredTransactions = transactions.filter(transaction =>\n    transaction.description.toLowerCase().includes(searchInput.toLowerCase())\n );\n\n // Step 4: Displaying Results\n // This is a simple way to display the filtered results. You can customize this as needed.\n return (\n    <div className=\"ui large fluid icon input\">\n      <input\n        type=\"text\"\n        placeholder=\"Search your Recent Transactions\"\n        value={searchInput}\n        onChange={handleInputChange}\n      />\n      <i className=\"circular search link icon\"></i>\n      <ul>\n        {filteredTransactions.map(transaction => (\n          <li key={transaction.id}>{transaction.description}</li>\n        ))}\n      </ul>\n    </div>\n );\n}\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}